#! /usr/bin/python3

import argparse
import numpy as np
import json

parser = argparse.ArgumentParser(description='Write xml file for GEOS from a JSON data file')
parser.add_argument('-i', help='input json filename', default="data.json")
parser.add_argument('-o', help='output xml filename', default="vti.xml")
args = parser.parse_args()
inputfile = args.i
outputfile = args.o

with open(inputfile) as f:
  data = json.load(f)

print('Writing '+ outputfile)
xml = open(outputfile, 'w' ,encoding="utf-8")
xml.write('<?xml version="1.0" ?>)\n')
xml.write('<Problem>\n')
xml.write('\n')
xml.write('  <!-- hexahedral mesh generated internally by GEOSX -->\n')
xml.write('  <Mesh>\n')
xml.write('    <InternalMesh\n')
xml.write('      name="mesh"\n')
xml.write('      elementTypes="{ C3D8 }"\n')
xml.write('      xCoords="{ '+ str(data['xmin'])+','+ str(data['xmax'])+'}"\n')
xml.write('      yCoords="{ '+ str(data['ymin'])+','+ str(data['ymax'])+' }"\n')
xml.write('      zCoords="{ '+ str(data['zmin'])+','+ str(data['zmax'])+' }"\n')
xml.write('      nx="{ '+str(data['nx_elem'])+' }"\n')
xml.write('      ny="{ '+str(data['ny_elem'])+' }"\n')
xml.write('      nz="{ '+str(data['nz_elem'])+' }"\n')
xml.write('      cellBlockNames="{ cb }"/>\n')
xml.write('  </Mesh>\n')
xml.write('\n')
xml.write('  <Geometry>\n')
xml.write('    <Box\n')
xml.write('      name="zpos"\n')
xml.write('      xMin="{ '+ str(data['xmin'] - data['box_eps'])+', '+str(data['ymin'] - data['box_eps'])+', '+str(data['zmax'] - data['box_eps'])+'}"\n')
xml.write('      xMax="{ '+ str(data['xmax'] + data['box_eps'])+', '+str(data['ymax'] + data['box_eps'])+', '+str(data['zmax'] + data['box_eps'])+'}"/>\n')
xml.write('    <Box\n')
xml.write('      name="zneg"\n')
xml.write('      xMin="{ '+ str(data['xmin'] - data['box_eps'])+', '+str(data['ymin'] - data['box_eps'])+', '+str(data['zmin'] - data['box_eps'])+'}"\n')
xml.write('      xMax="{ '+ str(data['xmax'] + data['box_eps'])+', '+str(data['ymax'] + data['box_eps'])+', '+str(data['zmin'] + data['box_eps'])+'}"/>\n')
xml.write('    <Box\n')
xml.write('      name="xpos"\n')
xml.write('      xMin="{ '+ str(data['xmax'] - data['box_eps'])+', '+str(data['ymin'] - data['box_eps'])+', '+str(data['zmin'] - data['box_eps'])+'}"\n')
xml.write('      xMax="{ '+ str(data['xmax'] + data['box_eps'])+', '+str(data['ymax'] + data['box_eps'])+', '+str(data['zmax'] + data['box_eps'])+'}"/>\n')
xml.write('    <Box\n')
xml.write('      name="xneg"\n')
xml.write('      xMin="{ '+ str(data['xmin'] - data['box_eps'])+', '+str(data['ymin'] - data['box_eps'])+', '+str(data['zmin'] - data['box_eps'])+'}"\n')
xml.write('      xMax="{ '+ str(data['xmin'] + data['box_eps'])+', '+str(data['ymax'] + data['box_eps'])+', '+str(data['zmax'] + data['box_eps'])+'}"/>\n')
xml.write('    <Box\n')
xml.write('      name="ypos"\n')
xml.write('      xMin="{ '+ str(data['xmin'] - data['box_eps'])+', '+str(data['ymax'] - data['box_eps'])+', '+str(data['zmin'] - data['box_eps'])+'}"\n')
xml.write('      xMax="{ '+ str(data['xmax'] + data['box_eps'])+', '+str(data['ymax'] + data['box_eps'])+', '+str(data['zmax'] + data['box_eps'])+'}"/>\n')
xml.write('    <Box\n')
xml.write('      name="yneg"\n')
xml.write('      xMin="{ '+ str(data['xmin'] - data['box_eps'])+', '+str(data['ymin'] - data['box_eps'])+', '+str(data['zmin'] - data['box_eps'])+'}"\n')
xml.write('      xMax="{ '+ str(data['xmax'] + data['box_eps'])+', '+str(data['ymin'] + data['box_eps'])+', '+str(data['zmax'] + data['box_eps'])+'}"/>\n')
xml.write('  </Geometry>\n')
xml.write('\n')
xml.write('    <!-- The free surface condition the domain -->\n')
xml.write('  <FieldSpecifications>\n')
xml.write('    <FieldSpecification\n')
xml.write('      name="zposFreeSurface"\n')
xml.write('      objectPath="faceManager"\n')
xml.write('      fieldName="FreeSurface"\n')
xml.write('      scale="0.0"\n')
xml.write('      setNames="{ zpos }"/>\n')
xml.write('    <FieldSpecification\n')
xml.write('      name="znegBottomSurface"\n')
xml.write('      objectPath="faceManager"\n')
xml.write('      fieldName="BottomSurface"\n')
xml.write('      scale="0.0"\n')
xml.write('      setNames="{ zneg }"/>\n')
xml.write('    <FieldSpecification\n')
xml.write('      name="LateralFreeSurface"\n')
xml.write('      objectPath="faceManager"\n')
xml.write('      fieldName="LateralSurface"\n')
xml.write('      scale="0.0"\n')
xml.write('      setNames="{ xpos, xneg, ypos, yneg }"/>\n')
xml.write('    <FieldSpecification\n')
xml.write('      name="Epsilon"\n')
xml.write('      initialCondition="1"\n')
xml.write('      objectPath="ElementRegions/Region/cb"\n')
xml.write('      fieldName="epsilon"\n')
xml.write('      scale="'+str(data['eps'])+'"\n')
xml.write('      setNames="{ all }"/>\n')
xml.write('    <FieldSpecification\n')
xml.write('      name="Delta"\n')
xml.write('      initialCondition="1"\n')
xml.write('      objectPath="ElementRegions/Region/cb"\n')
xml.write('      fieldName="delta"\n')
xml.write('      scale="'+str(data['delta'])+'"\n')
xml.write('      setNames="{ all }"/>\n')
xml.write('    <FieldSpecification\n')
xml.write('      name="f"\n')
xml.write('      initialCondition="1"\n')
xml.write('      objectPath="ElementRegions/Region/cb"\n')
xml.write('      fieldName="f"\n')
xml.write('      scale="'+str(data['vti_f'])+'"\n')
xml.write('      setNames="{ all }"/>\n')
xml.write('    </FieldSpecifications>\n')
xml.write('  <Solvers>\n')
xml.write('    <!-- define the solver -->\n')
xml.write('    <!-- define the source coordinates -->\n')
xml.write('    <!-- define the time source frequency -->\n')
xml.write('    <!-- define the receiver coordinates -->\n')
xml.write('    <AcousticVTISEM\n')
xml.write('      name="acousticSolver"\n')
xml.write('      cflFactor="'+str(data['cfl_factor'])+'"\n')
xml.write('      discretization="FE1"\n')
xml.write('      targetRegions="{ Region }"\n')
xml.write('      sourceCoordinates="{ { '+str(data['xs'])+', '+str(data['ys'])+', '+str(data['zs'])+' } }"\n')
xml.write('      timeSourceFrequency="'+str(data['f'])+'"\n')
xml.write('      receiverCoordinates="{ { 5, 5, 11 },\n')
xml.write('                             { 5, 50, 11 },\n')
xml.write('                             { 5, 95, 11 } }"/>\n')
xml.write('  </Solvers>\n')
xml.write('\n')
xml.write('  <NumericalMethods>\n')
xml.write('    <FiniteElements>\n')
xml.write('      <FiniteElementSpace\n')
xml.write('        name="FE1"\n')
xml.write('        order="1"\n')
xml.write('        formulation="SEM"/>\n')
xml.write('    </FiniteElements>\n')
xml.write('  </NumericalMethods>\n')
xml.write('\n')
xml.write('  <ElementRegions>\n')
xml.write('    <CellElementRegion\n')
xml.write('      name="Region"\n')
xml.write('      cellBlocks="{ cb }"\n')
xml.write('      materialList="{ nullModel }"/>\n')
xml.write('  </ElementRegions>\n')
xml.write('\n')
xml.write('  <Constitutive>\n')
xml.write('    <NullModel\n')
xml.write('      name="nullModel"/>\n')
xml.write('  </Constitutive>\n')
xml.write(' \n')
xml.write('  <FieldSpecifications>\n')
xml.write('    <!-- 1) The initial pressure field -->\n')
xml.write('    <FieldSpecification\n')
xml.write('      name="initialPressure_n"\n')
xml.write('      initialCondition="1"\n')
xml.write('      setNames="{ all }"\n')
xml.write('      objectPath="nodeManager"\n')
xml.write('      fieldName="pressure_p_n"\n')
xml.write('      scale="0.0"/>\n')
xml.write('\n')
xml.write('    <FieldSpecification\n')
xml.write('      name="initialPressure_p_nm1"\n')
xml.write('      initialCondition="1"\n')
xml.write('      setNames="{ all }"\n')
xml.write('      objectPath="nodeManager"\n')
xml.write('      fieldName="pressure_p_nm1"\n')
xml.write('      scale="0.0"/>\n')
xml.write('\n')
xml.write('    <FieldSpecification\n')
xml.write('      name="initialPressure_q_n"\n')
xml.write('      initialCondition="1"\n')
xml.write('      setNames="{ all }"\n')
xml.write('      objectPath="nodeManager"\n')
xml.write('      fieldName="pressure_q_n"\n')
xml.write('      scale="0.0"/>\n')
xml.write('\n')
xml.write('    <FieldSpecification\n')
xml.write('      name="initialPressure_q_nm1"\n')
xml.write('      initialCondition="1"\n')
xml.write('      setNames="{ all }"\n')
xml.write('      objectPath="nodeManager"\n')
xml.write('      fieldName="pressure_q_nm1"\n')
xml.write('      scale="0.0"/>\n')
xml.write('\n')
xml.write('    <!-- 2) The velocity in the domain -->\n')
xml.write('    <FieldSpecification\n')
xml.write('      name="cellVelocity"\n')
xml.write('      initialCondition="1"\n')
xml.write('      objectPath="ElementRegions/Region/cb"\n')
xml.write('      fieldName="mediumVelocity"\n')
xml.write('      scale="'+str(data['vp'])+'"\n')
xml.write('      setNames="{ all }"/>\n')
xml.write('\n')
xml.write('    <!-- 3) The free surface condition the domain -->\n')
xml.write('    <FieldSpecification\n')
xml.write('      name="zposFreeSurface"\n')
xml.write('      objectPath="faceManager"\n')
xml.write('      fieldName="FreeSurface"\n')
xml.write('      scale="0.0"\n')
xml.write('      setNames="{ zpos }"/>\n')
xml.write('  </FieldSpecifications>\n')
xml.write('\n')
xml.write('  <Events\n')
xml.write('    maxTime="'+str(data['Tmax'])+'">\n')
xml.write('    <!-- trigger the application of the solver -->\n')
xml.write('    <!-- control the timestepping here with forceDt -->\n')
xml.write('    <PeriodicEvent\n')
xml.write('      name="solverApplications"\n')
xml.write('      forceDt="'+str(data['dt'])+'"\n')
xml.write('      target="/Solvers/acousticSolver"/>\n')
xml.write('\n')
xml.write('    <!-- generate an output that can be read from VTK -->\n')
xml.write('    <PeriodicEvent\n')
xml.write('      name="vtk"\n')
xml.write('      timeFrequency="'+str(data['dt_vtk']) +'"\n')
xml.write('      targetExactTimestep="0"\n')
xml.write('      target="/Outputs/vtkOutput"/>\n')
xml.write('\n')
xml.write('    <!-- two events to output pressure in an hdf5 file -->\n')
xml.write('    <PeriodicEvent\n')
xml.write('      name="timeHistoryCollection"\n')
xml.write('      timeFrequency="'+str(data['dt_hdf5']) +'"\n')
xml.write('      target="/Tasks/pressureCollection"/>\n')
xml.write('\n')
xml.write('    <PeriodicEvent\n')
xml.write('      name="timeHistoryOutput"\n')
xml.write('      timeFrequency="'+str(data['dt_hdf5']) +'"\n')
xml.write('      targetExactTimestep="0"\n')
xml.write('      target="/Outputs/timeHistoryOutput"/>\n')
xml.write('\n')
xml.write('  </Events>\n')
xml.write('\n')
xml.write('  <!-- collect the pressure values at the nodes -->\n')
xml.write('  <Tasks>\n')
xml.write('    <PackCollection\n')
xml.write('      name="pressureCollection"\n')
xml.write('      objectPath="/Problem/domain/MeshBodies/mesh/meshLevels/FE1/nodeManager"\n')
xml.write('      fieldName="pressure_p_np1"/>\n')
xml.write('  </Tasks>\n')
xml.write('\n')
xml.write('  <Outputs>\n')
xml.write('    <!-- output all the mesh values registered with a plot level LEVEL_0, LEVEL_1, LEVEL_2, LEVEL_3   -->\n')
xml.write('    <VTK\n')
xml.write('      name="vtkOutput"\n')
xml.write('      plotLevel="3"/>\n')
xml.write('\n')
xml.write('    <!-- output the pressure values to a file named pressure_history.hdf5  -->\n')
xml.write('    <TimeHistory\n')
xml.write('      name="timeHistoryOutput"\n')
xml.write('      sources="{ /Tasks/pressureCollection }"\n')
xml.write('      filename="pressure_history"/>\n')
xml.write(' \n')
xml.write('  </Outputs>\n')
xml.write('</Problem>\n')
xml.close()

print("Finished!")